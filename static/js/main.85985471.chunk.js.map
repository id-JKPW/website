{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/exp.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","style","width","margin","className","col","src","Component","AboutMe","ExpAch","Main","path","component","LandingPage","Exp","App","fixedHeader","title","activeClassName","exact","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAsBeA,E,uKAjBX,OACE,yBAAKC,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAClC,kBAAC,OAAD,CAAMC,UAAU,gBACd,kBAAC,OAAD,CAAMC,IAAK,IACT,yBAAKC,IAAM,qBAAqBF,UAAY,eAC5C,yBAAKA,UAAU,mBACb,0CACA,wDACA,wE,GAVQG,aC0BPC,E,uKAvBX,OACE,yBAAKJ,UAAU,gBACb,kBAAC,OAAD,CAAMA,UAAU,gBACd,kBAAC,OAAD,CAAMC,IAAK,GACT,yBAAKD,UAAU,gBACb,0CACA,iHACA,gHACA,iGACA,uHAGJ,kBAAC,OAAD,CAAMC,IAAK,GACT,yBAAKD,UAAU,gBACb,sD,GAjBQG,aC0BPE,E,uKAxBX,OACE,yBAAKL,UAAU,YACb,kBAAC,OAAD,CAAMA,UAAU,YACd,kBAAC,OAAD,CAAMC,IAAK,GACT,yBAAKD,UAAU,YACb,6CACA,uBAAGA,UAAU,YAAb,sCACA,uBAAGA,UAAU,YAAb,sDACA,uBAAGA,UAAU,YAAb,wEAGJ,kBAAC,OAAD,CAAMC,IAAK,GACT,yBAAKD,UAAU,YACb,2CACA,uBAAGA,UAAU,YAAb,gDACA,uBAAGA,UAAU,YAAb,+E,GAjBOG,aCiBNG,EATF,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,UAAaC,IACpC,kBAAC,IAAD,CAAOF,KAAK,mBAAmBC,UAAaJ,IAC5C,kBAAC,IAAD,CAAOG,KAAK,eAAeC,UAAaE,M,QCc7BC,E,uKArBX,OACE,6BACE,kBAAC,SAAD,CAAQC,aAAW,GACf,kBAAC,SAAD,CAAQZ,UAAU,eAAea,MAAM,mBACrC,kBAAC,aAAD,KACI,kBAAC,IAAD,CAASC,gBAAgB,cAAcC,OAAK,EAACC,GAAG,KAAhD,SACA,kBAAC,IAAD,CAASF,gBAAgB,cAAcE,GAAG,YAA1C,YACA,kBAAC,IAAD,CAASF,gBAAgB,cAAcE,GAAG,QAA1C,gBAIN,kBAAC,EAAD,MAEA,kBAAC,UAAD,Y,GAfMb,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.85985471.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Cell } from 'react-mdl'\n\nclass Landing extends Component {\n  render(){\n    return(\n      <div style={{width: '100%', margin: 'auto'}}>\n        <Grid className=\"landing-grid\">\n          <Cell col={12}>\n            <img src = \"/avatar_square.png\" className = \"home-img01\"/>\n            <div className=\"home-title-text\">\n              <h1>Jimmy Wong</h1>\n              <h2>Commerce and IT Graduate</h2>\n              <p>HTML | CSS | SQL | REACT | PYTHON</p>\n            </div>\n          </Cell>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default Landing;\n","import React, { Component } from 'react';\nimport { Grid, Cell } from 'react-mdl'\n\nclass AboutMe extends Component {\n\n  render(){\n    return(\n      <div className=\"aboutme-body\">\n        <Grid className=\"aboutme-grid\">\n          <Cell col={6}>\n            <div className=\"aboutme-text\">\n              <h2> About Me </h2>\n              <p> Hello, welcome to my website. As you may have noticed already, my name is Jimmy. </p>\n              <p> My interests is in computer security, but I am also interest in web development.</p>\n              <p> I have completed my Commerce and IT Bachelor's degree at Monash. </p>\n              <p> My major for commerce is finance and major for IT is computer networks and security. </p>\n            </div>\n          </Cell>\n          <Cell col={6}>\n            <div className=\"aboutme-text\">\n              <h2> Social Media </h2>\n            </div>\n          </Cell>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default AboutMe;\n","import React, { Component } from 'react';\nimport { Grid, Cell } from 'react-mdl'\n\nclass ExpAch extends Component {\n  render(){\n    return(\n      <div className=\"exp-body\">\n        <Grid className=\"exp-grid\">\n          <Cell col={6}>\n            <div className=\"exp-text\">\n              <h2> Experience: </h2>\n              <p className=\"p-indent\"> - IT service desk analyst at ATO </p>\n              <p className=\"p-indent\"> - IT manager at Monash University Taekwondo Club </p>\n              <p className=\"p-indent\"> - Intern at Skyview Optical Company Limited (based in Hong Kong) </p>\n            </div>\n          </Cell>\n          <Cell col={6}>\n            <div className=\"exp-text\">\n              <h2> Projects: </h2>\n              <p className=\"p-indent\"> - Monash WIL project for The Clayton Hotel </p>\n              <p className=\"p-indent\"> - Team leader for Team 17 2020 Monash Industry Experience project </p>\n            </div>\n          </Cell>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default ExpAch;\n","//routing page\n\nimport React from 'react';\nimport {Switch, Route} from 'react-router-dom';\n\nimport LandingPage from './landingpage';\nimport AboutMe from './aboutme';\nimport Exp from './exp';\n\n//stateless, dont need class based so dont need to import Component\n\nconst Main = () => (\n  <Switch>\n    <Route path=\"/website\" component = {LandingPage} />\n    <Route path=\"/website/aboutme\" component = {AboutMe} />\n    <Route path=\"/website/exp\" component = {Exp} />\n  </Switch>\n)\n\n\nexport default Main;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {Layout, Header, Textfield, Drawer, Navigation, Content} from 'react-mdl';\nimport Main from './components/main';\nimport {NavLink} from 'react-router-dom';\n\nclass App extends Component{\n  render() {\n    return (\n      <div>\n        <Layout fixedHeader>\n            <Header className=\"header-color\" title=\"Jimmy's Website\">\n              <Navigation>\n                  <NavLink activeClassName=\"active-link\" exact to=\"/\">INTRO</NavLink>\n                  <NavLink activeClassName=\"active-link\" to=\"/aboutme\">ABOUT ME</NavLink>\n                  <NavLink activeClassName=\"active-link\" to=\"/exp\">EXPERIENCE</NavLink>\n              </Navigation>\n            </Header>\n\n            <Main/>\n\n            <Content />\n        </Layout>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}